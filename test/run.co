nephrite = require '../'
coco = require 'coco'
fs = require 'fs'
join = -> it.join ''

function err
	for @@ => console.log &
	process.exit 1
function read
	fs.readFileSync it, 'utf8' .trim! - /\r/g
function safe-jrp # json-read-parse
	if fs.existsSync it
		try
			JSON.parse read it
		catch throw new Error "Cannot parse #it"
	else {}


console.log 'Booting test suite ...'

cases = fs.readdirSync 'test/jade'
	.map -> it - '.jade'

for cases
	path = "test/jade/#&.jade"
	html-path = path
		.replace '/jade/' '/html/'
		.replace '.jade' '.html'
	json-path = path
		.replace '/jade/' '/json/'
		.replace '.jade' '.json'
	extra-path = json-path.replace '.' '.extra.'

	unless fs.existsSync path
		err "cannot find #path"
	unless fs.existsSync html-path
		err "cannot find #html-path"

	args = safe-jrp json-path
	extra = safe-jrp extra-path

	src = read path .trim!
	html = read html-path

	try
		src = nephrite src, path, {+pretty}
	catch
		say src
		err "Nephrite error compiling #path : #e"

	try
		src = coco.compile src, {+bare}
	catch
		errline = "#e"match /on line ([0-9]+)/ ?.1
		console.log src
		console.log "Error compiling #path : #e =>"
		console.log src.split('\n')[errline-1] if errline?
		err!

	fn = Function "locals" "extra" """
	module = {};
	#src
	return module.exports(locals, extra);
	"""
	try
		result = fn args, extra .trim!
	catch
		console.log """
			Error : #e
			#src
		"""

	if result is html
		console.log "OK: #&."
	else
		err """
			**FAIL** : #&.
			Got      : #result
			Expected : #html
		"""

console.log 'Tests passed!'