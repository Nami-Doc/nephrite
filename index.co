blame = -> console.log it; process.exit!
jade = require \jade

module.exports = class Compiler
  # tags to parse
  tags = <[if unless while for]>

  # tags that must take on another
  chained-tags = <[else]>

  # tags that must be joined
  joinable-tags = <[while for]>

  (@src, @filename, @jade-opts) ~>
    @ind-len = 0
    @base-ind = ""
    
    @prelude = []
    jade.filters.prelude = ~>
      @prelude.push it
      "" # don't show anything, jade !

    return @compile!

  # prepares interpolations
  interp: (line, extra) ->
    line .= slice extra * @ind-len
    trimmed = line.trim!

    if
      trimmed.0 is '-'
        ; # jade interpolation
      
      trimmed.slice(0 2) is \#{
        # tag interpolation => #{tag} becomes should be #{"tag"}
        line .= replace \#{ '%{"__INTER__'
        line .= replace \} '__OUTER__"}'
      
      # `== abc` is jade, `= abc` is code
      trimmed.0 is '=' and trimmed.1 is not '='
        line = line.replace('=' '| #{(') + ') or ""}'

      ~line.indexOf '== '
        line .= replace '== ' '= '

      ~line.indexOf '= '
        # BAAH this is bad, it's gonna do bad things such as
        # a(foo= "bar")
        # but well...
        line = line.replace('= ' ' #{(') + ') or ""}'

    line

  entab: -> "#{@base-ind}" * it

  compile: ->
    {src, filename} = @

    src .= replace /@@/g \extra.
    src .= replace /@/g \locals.

    src = @convert src
    src .= replace /#{/g \{{

    # sometimes we need jade interp
    # let's use %{} for that (only for the parser)
    src .= replace /%{/g \#{

    try
      fn = jade.compile src, @jade-opts
    catch
      say src
      blame "Jade Error compiling #filename : #e"

    fn = fn!
    
    # used for tag interpolation (`#{tag} text`)
    # WARNING : can not use ''
    fn .= replace /__INTER__/g \#{
    fn .= replace /__OUTER__/g \}

    # clean a bit. Sadly no way to disable escaping
    fn .= replace /&quot;/g \"

    @wrap fn.replace /\{\{/g \#{


  convert: ->
    it -= /\r/g # fuck
    src = []
    
    # keep tracks on indent needed for tags
    # so that we can 
    indent-levels = []

    # keep tracks of real indent to insert
    # (same as indent-levels minus extra-level)
    real-indents = []

    var prev-indent, filter-indent
    start = true

    # let's process it ...
    for line of (it + "\n") / '\n'
      if not filter-indent and (line.trim!0 is '-' or src[*-1]?[*-1] is ',')
        # attributes continuation
        src.push @interp line, extra-level
        continue

      extra-level = indent-levels.length

      indent = if line.match /^[\s\t]+/
        @base-ind = that.0 unless @base-ind
        @ind-len = that.0.length unless @ind-len

        that.0.length / @ind-len # 2 spaces indent
      else 0

      # avoid escaping filters
      if filter-indent
        if indent < filter-indent
          # GET. OUT.
          filter-indent = 0
        else # we're still in the filter
          src.push line
          continue

      trimmed = line.trim!
      [tag] = trimmed.split ' '

      # auto-close
      while indent <= indent-levels[*-1]
        indent-levels.pop!
        #        INDENT            close the """ and nullcheck
        src.push @entab(real-indents.pop!) + '| """) or ""}'
        --extra-level # decrease debt

      tabs = @entab indent - extra-level
      
      if start
        start = false unless tag is '~'
      if
        trimmed.0 is ':'
          # filter, stop escaping shit
          # start in the next level
          filter-indent = indent + 1
        tag is '~'
          code = line.trim!slice 1
          if start
            @prelude.push code
            continue
          else
            line = tabs + "| \#{((#code); '')}"
        tag of tags
          # insert the tag
          code = line.trim!

          filter = if tag of joinable-tags
            \join
          else ''

          line = tabs + '| #{' + filter + '(' + code + ' then """'

          # we're expecting an outdent
          indent-levels.push indent
          real-indents.push indent - extra-level
        tag of chained-tags
          # answer to another tag

          src.pop! # remove closing + nullcheck
          line = tabs + '| """ ' + line.trim! + ' then """'

          # we're expecting an outdent
          indent-levels.push indent
          real-indents.push indent - extra-level
        else
          line = @interp line, extra-level

      src.push line
      prev-indent := indent - extra-level

    src *= \\n

    src
  
  wrap: (src) ->
    """
      #{@prelude * '\n'}
      join = -> if it then it.join '' else ''
      module.exports = (locals, extra) ->
        \"\"\"
          #src
        \"\"\"
    """